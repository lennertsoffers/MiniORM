package com.lennertsoffers.processor.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.util.Optional;

import com.lennertsoffers.persistence.api.ConnectionFactory;
import com.lennertsoffers.persistence.api.repositories.Repository;


public class ${className} implements Repository<${entity.getPrimaryKeyField().wrapperType()}, ${entity.getClassName()}> {
    public void save(${entity.getClassName()} ${lowercaseName}) {
        ConnectionFactory connectionFactory = ConnectionFactory.getInstance();
        Connection connection = connectionFactory.getConnection();

        String columnNames = "";
#foreach($field in $entity.getFieldColumns())#set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))
        #if(${field.wrapper()})if (${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}() != null) {
            columnNames += "${field.columnName()}, ";
        }
#else
columnNames += "${field.columnName()}, ";
#end
#end

        columnNames = columnNames.substring(0, columnNames.length() - 2);

        int paramCount = 0;
    #foreach($field in $entity.getFieldColumns())#set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))
    #if(${field.wrapper()})if (${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}() != null) {
            paramCount++;
        }
    #else
paramCount++;
    #end
#end
    String paramString = "?, ".repeat(paramCount);
        paramString = paramString.substring(0, paramString.length() - 2);

        String insertSql = "INSERT INTO ${entity.getTableName()}(" +
            columnNames +
        ") VALUES (" +
            paramString +
        ")";

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(insertSql);
        #set ($i = 1)#foreach($field in $entity.getFieldColumns())#set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))#set ($capitalizedJavaType = $field.javaType().substring(0, 1).toUpperCase() + $field.javaType().substring(1))
    #if(${field.wrapper()})if (${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}() != null) {
                preparedStatement.set${capitalizedJavaType}($i, ${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}());
            }
        #else
preparedStatement.set${capitalizedJavaType}($i, ${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}());
        #end
        #set ($i = $i + 1)#end

            preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        connectionFactory.closeConnection(connection);
    }

    public Optional<${entity.getClassName()}> updateById(${entity.getClassName()} ${lowercaseName}, ${entity.getPrimaryKeyField().wrapperType()} id) {
        ConnectionFactory connectionFactory = ConnectionFactory.getInstance();
        Connection connection = connectionFactory.getConnection();

        int setCount = 1;
        String columnNames = "";
#foreach($field in $entity.getFieldColumns())#set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))
    #if($foreach.index != 0)#if(${field.wrapper()})if (${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}() != null) {
            columnNames += "${field.columnName()} = ?, ";
            setCount++;
        }
    #else
columnNames += "${field.columnName()} = ?, ";
        setCount++;
    #end#end
#end

        columnNames = columnNames.substring(0, columnNames.length() - 2) + " ";

        String updateSql = "UPDATE ${entity.getTableName()} SET " +
            columnNames +
            "WHERE ${entity.getPrimaryKeyField().columnName()} = ?";

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(updateSql);

#set ($i = 1)#foreach($field in $entity.getFieldColumns())#set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))#set ($capitalizedJavaType = $field.javaType().substring(0, 1).toUpperCase() + $field.javaType().substring(1))#if($foreach.index != 0)#if(${field.wrapper()})if (${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}() != null) {
                preparedStatement.set${capitalizedJavaType}($i, ${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}());
            }
#else
preparedStatement.set${capitalizedJavaType}($i, ${lowercaseName}#if(${field.javaType().equals("boolean")} || ${field.javaType().equals("Boolean")}).is#else.get#end${capitalizedName}());
#end
#set ($i = $i + 1)#end
            #end#set ($capitalizedJavaType = $entity.getPrimaryKeyField().javaType().substring(0, 1).toUpperCase() + $entity.getPrimaryKeyField().javaType().substring(1))
preparedStatement.set${capitalizedJavaType}(setCount, id);

            preparedStatement.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        connectionFactory.closeConnection(connection);

        return this.findById(id);
    }

    public Optional<${entity.getClassName()}> findById(${entity.getPrimaryKeyField().wrapperType()} id) {
        ConnectionFactory connectionFactory = ConnectionFactory.getInstance();
        Connection connection = connectionFactory.getConnection();

        String querySql = "SELECT * FROM ${entity.getTableName()} WHERE ${entity.getPrimaryKeyField().columnName()} = ?";

        try {
            PreparedStatement preparedStatement = connection.prepareStatement(querySql);
            preparedStatement.setInt(1, id);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                ${entity.getClassName()} ${lowercaseName} = new ${entity.getClassName()}();

        #foreach($field in $entity.getFieldColumns())
        #set ($capitalizedName = $field.fieldName().substring(0, 1).toUpperCase() + $field.fieldName().substring(1))
        #set ($capitalizedJavaType = $field.javaType().substring(0, 1).toUpperCase() + $field.javaType().substring(1))
        ${lowercaseName}.set${capitalizedName}(resultSet.get${capitalizedJavaType}("${field.columnName()}"));
#if(${field.wrapper()})
                if (resultSet.wasNull()) {
                    ${lowercaseName}.set${capitalizedName}(null);
                }
#end
        #end

                connectionFactory.closeConnection(connection);

                return Optional.of(${lowercaseName});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        connectionFactory.closeConnection(connection);
        return Optional.empty();
    }
}
